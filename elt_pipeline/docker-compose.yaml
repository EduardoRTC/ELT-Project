version: "3.8"

# ──────────────── ANCHORS ────────────────────────────────────────────────
x-airflow-env: &airflow-env
  AIRFLOW__CORE__EXECUTOR: LocalExecutor
  AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
  AIRFLOW__API__AUTH_BACKENDS: airflow.api.auth.backend.basic_auth        # login via tela
  AIRFLOW__CORE__AUTH_MANAGER: airflow.providers.fab.auth_manager.fab_auth_manager.FabAuthManager
  AIRFLOW_CONN_DATABRICKS_DEFAULT: >
    databricks://token:${DATABRICKS_TOKEN}@${DATABRICKS_HOST}${DATABRICKS_CLUSTER_ID:+?cluster_id=${DATABRICKS_CLUSTER_ID}}
  # dependências extras (DEV)
  _PIP_ADDITIONAL_REQUIREMENTS: |
    apache-airflow-providers-databricks==7.6.0
    pyspark==4.0.0

x-airflow-vols: &airflow-vols
  - ./dags:/opt/airflow/dags
  - ./plugins:/opt/airflow/plugins
  - ./logs:/opt/airflow/logs

# ──────────────── SERVIÇOS ────────────────────────────────────────────────
services:

  # Metastore
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
    restart: unless-stopped

  # Passo 1 – migra o banco e cria o usuário admin
  airflow-init:
    image: apache/airflow:3.0.3-python3.12
    depends_on:
      - postgres
    environment:
      <<: *airflow-env
      _AIRFLOW_DB_MIGRATE: "true"
      _AIRFLOW_WWW_USER_CREATE: "true"
      _AIRFLOW_WWW_USER_USERNAME: "airflow"
      _AIRFLOW_WWW_USER_PASSWORD: "airflow"
      _AIRFLOW_WWW_USER_EMAIL: "airflow@example.com"
    command: >
      bash -c "
        echo '⏳  Migrando metadados…' &&
        airflow db migrate &&
        airflow connections create-default-connections &&
        echo '✅  Base pronta. Usuário: airflow / airflow'
      "
    volumes: *airflow-vols
    restart: on-failure

  # UI / API (substitui o antigo webserver)
  airflow-ui:
    image: apache/airflow:3.0.3-python3.12
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    environment: *airflow-env
    command: ["airflow", "api-server"]
    ports:
      - "8080:8080"
    volumes: *airflow-vols
    restart: unless-stopped

  # Scheduler
  airflow-scheduler:
    image: apache/airflow:3.0.3-python3.12
    depends_on:
      - airflow-ui
    environment: *airflow-env
    command: ["airflow", "scheduler"]
    volumes: *airflow-vols
    restart: unless-stopped

  # Triggerer (para sensores deferrable etc.)
  airflow-triggerer:
    image: apache/airflow:3.0.3-python3.12
    depends_on:
      - airflow-ui
    environment: *airflow-env
    command: ["airflow", "triggerer"]
    volumes: *airflow-vols
    restart: unless-stopped

volumes:
  postgres-db:
